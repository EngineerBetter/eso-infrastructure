platform: linux

image_resource:
  type: docker-image
  source:
    repository: engineerbetter/pcf-ops
    tag: latest

params:
  GOOGLE_CREDENTIALS: ((gcp_concourse_iam))
  GOOGLE_APPLICATION_CREDENTIALS: creds.json

run:
  path: bash
  args:
  - -c
  - |
    set -eo pipefail
    export USE_GKE_GCLOUD_AUTH_PLUGIN=True

    echo "${GOOGLE_CREDENTIALS}" > ${GOOGLE_APPLICATION_CREDENTIALS}
    gcloud auth activate-service-account \
        --key-file "${GOOGLE_APPLICATION_CREDENTIALS}" \
        --project 'kubernetes-cluster-eso'

    gcloud container clusters get-credentials kubernetes-cluster-eso \
           --zone=europe-west2-a --project=kubernetes-cluster-eso
    echo "Check if vault is already initialized or not..."
    is_init=`kubectl exec -it -n vault-ns vault-0 -- sh -c "vault status | grep Initialized | tr -s ' ' | cut -d ' ' -f2 | tr -d '\n'"`
    if [[ $is_init == "true" ]]
    then
      echo "Vault is already initialized"
      echo "Exit Setup job.."
      exit 0
    else
      echo "Initialize Vault with five key share and three key threshold..."
      kubectl -n vault-ns exec vault-0 -- vault operator init -format=json > cluster-keys.json

      echo "Capture the root token..."
      VAULT_ROOT_TOKEN=$(cat cluster-keys.json | jq -r ".root_token")

      echo "Capture the vault unseal keys and unseal vault..."
      VAULT_UNSEAL_KEY_1=$(cat cluster-keys.json | jq -r ".unseal_keys_b64[0]")
      VAULT_UNSEAL_KEY_2=$(cat cluster-keys.json | jq -r ".unseal_keys_b64[1]")
      VAULT_UNSEAL_KEY_3=$(cat cluster-keys.json | jq -r ".unseal_keys_b64[2]")

      echo "Unsealing vault..."
      kubectl -n vault-ns exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY_1
      kubectl -n vault-ns exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY_2
      kubectl -n vault-ns exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY_3
      
      echo "Create k8s secret containing vault credentials..."
      kubectl -n vault-ns create secret generic vault-credentials --from-literal=vault-root-token=$VAULT_ROOT_TOKEN --from-literal=vault-unseal-key-1=$VAULT_UNSEAL_KEY_1 --from-literal=vault-unseal-key-2=$VAULT_UNSEAL_KEY_2 --from-literal=vault-unseal-key-3=$VAULT_UNSEAL_KEY_3

      echo "Log into vault..."
      kubectl -n vault-ns exec vault-0 -- vault login $VAULT_ROOT_TOKEN > /dev/null 2>&1

      echo "Enable kubernetes authentication method..."
      kubectl -n vault-ns exec vault-0 -- vault auth enable kubernetes

      echo "Configure the Kubernetes authentication method to use the location of the Kubernetes API..."
      kubectl -n vault-ns exec vault-0 -- vault write auth/kubernetes/config kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443"

      echo "Create eso-vault-sa service account to be used by the eso pods..."
      kubectl -n default create sa eso-vault-sa

      echo "Create vault policy that enables read and write capabilities for secrets at specific path..."
      cat <<EOF > eso-vault-policy.hcl
      path "secret/*" {
        capabilities = ["create", "read", "update", "list"]
      }
    EOF

      kubectl -n vault-ns cp eso-vault-policy.hcl vault-0:/vault/file/eso-vault-policy.hcl

      kubectl -n vault-ns exec vault-0 -- vault policy write eso-vault-policy /vault/file/eso-vault-policy.hcl

      echo "Create a vault Kubernetes authentication role,that connects the Kubernetes service account and vault policy..."
      kubectl -n vault-ns exec vault-0 -- vault write auth/kubernetes/role/eso bound_service_account_names=eso-vault-sa bound_service_account_namespaces=default policies=eso-vault-policy ttl=24h
      kubectl exec vault-0 -- vault secrets enable -version=2 kv -path=secret
      echo "Clean the environment"
      rm cluster-keys.json
      rm ${GOOGLE_APPLICATION_CREDENTIALS}
    fi
